[{"/Users/mattbryce/reward-chart/client/src/index.js":"1","/Users/mattbryce/reward-chart/client/src/reportWebVitals.js":"2","/Users/mattbryce/reward-chart/client/src/App.js":"3","/Users/mattbryce/reward-chart/client/src/components/LocalData/GetLocalData.js":"4","/Users/mattbryce/reward-chart/client/src/components/LocalData/data.js":"5","/Users/mattbryce/reward-chart/client/src/components/OnlineData/GetOnlineData.js":"6"},{"size":500,"mtime":1647646095829,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1647646095829,"results":"9","hashOfConfig":"8"},{"size":551,"mtime":1647902250727,"results":"10","hashOfConfig":"8"},{"size":1177,"mtime":1647646095829,"results":"11","hashOfConfig":"8"},{"size":164,"mtime":1647646095829,"results":"12","hashOfConfig":"8"},{"size":4426,"mtime":1647903927673,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1klqbug",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/mattbryce/reward-chart/client/src/index.js",[],[],"/Users/mattbryce/reward-chart/client/src/reportWebVitals.js",[],[],"/Users/mattbryce/reward-chart/client/src/App.js",["35"],[],"import React, { Component } from 'react';\nimport './App.css';\nimport GetLocalPosts from './components/LocalData/GetLocalData';\nimport GetOnlineData from './components/OnlineData/GetOnlineData';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Uncomment below to use local data */}\n        {/* <h1 className=\"header\">Local Reward Status (Read-Only)</h1>\n        <GetLocalPosts/> */}\n        <h1 className=\"header\">Reward Status</h1>\n        <GetOnlineData/>\n      </div>\n    );\n  }\n}\n\nexport default App;",["36","37"],"/Users/mattbryce/reward-chart/client/src/components/LocalData/GetLocalData.js",["38","39"],[],"/Users/mattbryce/reward-chart/client/src/components/LocalData/data.js",[],[],"/Users/mattbryce/reward-chart/client/src/components/OnlineData/GetOnlineData.js",["40","41"],[],"import React, { Component } from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faCircleMinus, faCirclePlus, faStar} from '@fortawesome/free-solid-svg-icons';\n\nclass GetOnlineData extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            error : null,\n            isLoaded : false,\n            isUpdated: false,\n            posts : []          \n        };\n    }\n\n    componentDidMount(){\n        \n        fetch(\"http://localhost:9000/user/list/\")\n        .then( response => response.json())\n        .then(\n            // handle the result\n            (result) => {\n                result.sort((a,b) => a.name.localeCompare(b.name));\n                //console.log(result);\n                this.setState({\n                    isLoaded : true,\n                    posts : result\n                });\n            },\n\n            // Handle error \n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                })\n            },\n        )\n    }\n\n    createStars(n){\n        var Stars = [];\n        var i =0;\n        for(i =0; i < n; i++){\n            Stars.push(<FontAwesomeIcon icon={faStar} fixedWidth/>);\n        }\n        return Stars;\n    }\n    incrementStars(name, stars){\n        if(stars == 10){\n            return\n        }else \n        stars++;\n        fetch('http://localhost:9000/user/update/' + name, {\n            method: 'PUT',\n            body: JSON.stringify(\n                {\n                    \"name\" : name,\n                    \"stars\" : stars\n                }\n            ),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(\n            // handle the result\n            (response) => {\n                //console.log(response.status);\n                this.setState({\n                    isUpdated: true \n                });\n                this.componentDidMount()\n            },\n\n            // Handle error \n            (error) => {\n                this.setState({\n                    isUpdated: true,\n                    error\n                })\n            },\n        )\n    }\n\n    decrementStars(name, stars){\n        if(stars == 0){\n            return\n        }else \n        stars--;\n        return fetch('http://localhost:9000/user/update/' + name, {\n            method: 'PUT',\n            \n            body: JSON.stringify(\n                {\n                    \"name\" : name,\n                    \"stars\" : stars\n                }\n            ),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(\n            // handle the result\n            (response) => {\n                //console.log(response.status);\n                this.setState({\n                    isUpdated: true \n                });\n                this.componentDidMount()\n            },\n\n            // Handle error \n            (error) => {\n                this.setState({\n                    isUpdated: true,\n                    error\n                })\n            },\n        )\n    }\n\n    render() {\n        const {error, isLoaded, posts} = this.state;\n\n        if(error){\n            return <div>Error in loading</div>\n        }else if (!isLoaded) {\n            return <div>Loading ...</div>\n        }else{\n            return(\n                <div>\n                    {\n                        posts.map(post => (\n                            <div>\n                            <h2 className=\"header\">{post.name}</h2>\n                            <div class=\"fa fa-3x stars\">\n                                {this.createStars(post.stars)}\n                            </div>\n                            <br />\n                            <div class='fa fa-3x'>\n                            <button onClick={ () => this.incrementStars(post.name, post.stars) } class='plus button'><FontAwesomeIcon icon={faCirclePlus} fixedWidth/></button>\n                            <button onClick={ () => this.decrementStars(post.name, post.stars) } class='minus button'><FontAwesomeIcon icon={faCircleMinus} fixedWidth/></button>\n                            </div>\n                            <br />\n                        </div> \n                        ))\n                    }   \n                </div>\n            );\n        } \n    }\n  }\n  \n  export default GetOnlineData;",{"ruleId":"42","severity":1,"message":"43","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":21},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"42","severity":1,"message":"50","line":3,"column":9,"nodeType":"44","messageId":"45","endLine":3,"endColumn":22},{"ruleId":"42","severity":1,"message":"51","line":3,"column":24,"nodeType":"44","messageId":"45","endLine":3,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":50,"column":18,"nodeType":"54","messageId":"55","endLine":50,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":87,"column":18,"nodeType":"54","messageId":"55","endLine":87,"endColumn":20},"no-unused-vars","'GetLocalPosts' is defined but never used.","Identifier","unusedVar","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"'faCircleMinus' is defined but never used.","'faCirclePlus' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]